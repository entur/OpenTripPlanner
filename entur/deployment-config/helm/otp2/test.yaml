---
# Source: otp2/templates/configmap-graph-builder.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:    
    app: graph-builder-otp2
    release: graph-builder-otp2
    team: ror
    slack: talk-ror
    type: api
    namespace: default
  name: graph-builder-otp2
  namespace: default
data:
  otp-config.json: |+
      {
        "configVersion" : "<+artifacts.primary.tag>",
        "otpFeatures" : {
            "ConsiderPatternsForDirectTransfers" : true,
            "GoogleCloudStorage" : true,
            "FlexRouting": true
        }
      }
  build-config.json: |+
      {
        "configVersion" : "<+artifacts.primary.tag>",
        "dataImportReport": true,
        "subwayAccessTime": 0,
        "embedRouterConfig": true,
        "areaVisibility": true,
        "platformEntriesLinking": true,
        "osmDefaults": {
          "osmTagMapping": "norway",
          "timeZone": "Europe/Oslo"
        },
        "osmCacheDataInMem": "true",
        "staticParkAndRide": true,
        "staticBikeParkAndRide": true,
        "maxDataImportIssuesPerFile": 1000,
        "maxTransferDuration": "30m",
        "distanceBetweenElevationSamples": 25,
        "multiThreadElevationCalculations": true,
        "boardingLocationTags": [],
        "osm" : [
          {"source": "gs://marduk-production/osm/norway-latest.osm.pbf"},
          {"source": "gs://marduk-production/osm/static/osm_static_sweden_extract.pbf"},
          {"source": "gs://marduk-production/osm/static/osm_static_sweden_storlien_extract.pbf"}
        ],
        "dem" : [
          {"source": "gs://ror-marduk-internal-production/kartverket/heightData/norge_dem_50m_33.tif"}
        ],
        "transitFeeds": [
          {
            "type": "netex",
            "source": "gs://marduk-production/outbound/netex/rb_norway-aggregated-netex.zip",
            "sharedFilePattern": "_stops.xml",
            "sharedGroupFilePattern": "_(\\w{3})(_flexible)?_shared_data.xml",
            "groupFilePattern": "(\\w{3})_.*\\.xml",
            "feedId": "RB",
            "ignoreFareFrame": false
          }
        ],
        "streetGraph": "gs://ror-marduk-internal-production/${OTP_GCS_BASE_GRAPH_PATH}/streetGraph-otp2-${otp.serialization.version.id}.obj",
        "graph": "gs://ror-marduk-internal-production/${OTP_GCS_WORK_DIR}/Graph-otp2-${otp.serialization.version.id}.obj",
        "buildReportDir": "gs://ror-marduk-internal-production/${OTP_GCS_WORK_DIR}/report"
      }
---
# Source: otp2/templates/logback-configmap-graph-builder.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: otp2-logback-config-graph-builder
  namespace: default
  labels:    
    app: otp2
    release: release-name
    team: ror
    slack: talk-ror
    type: api
    customLogRetention: enabled
    namespace: default
data:
  logback.xml: |-
    <configuration>
    
      <variable name="otpServiceName" value="${entur.otp.service.name:-otp2}" />
    
        <!--
           Add the default shutdown hook, with a 5s delay so that log messages produced during shutdown are visible.
        -->
        <shutdownHook>
            <delay>5000</delay>
        </shutdownHook>
    
      <!--
        This suppresses the meta-log entries about Logback configuration (how Java).
        This is a stopgap measure.
        The right solution is to make sure there are not logback.xml files from our dependency libraries on the classpath.
       -->
      <statusListener class="ch.qos.logback.core.status.NopStatusListener" />
    
      <!-- This will push these level changes onto JUL. Otherwise, JUL defaults to a high threshold
           for logging and debug log messages will never make it to slf4j. -->
      <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator"/>
    
      <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
          <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
              <providers>
                  <!-- provides the timestamp <timestamp/> -->
                  <!-- provides the version <version/> -->
                  <!-- provides the fields in the configured pattern -->
                  <pattern>
                      <!-- the pattern that defines what to include -->
                      <pattern>
                          {
                          "serviceContext": {
                              "service": "${otpServiceName}"
                          },
                          "message": "%message\n%ex{full}",
                          "severity": "%level",
                          "thread": "%thread",
                          "correlationId": "%X{correlationId}",
                          "etClientName": "%X{etClientName}",
                          "reportLocation": {
                              "filePath": "%logger",
                              "lineNumber": "%line",
                              "functionName": "%method"
                          }
                          }
                      </pattern>
                  </pattern>
              </providers>
          </encoder>
      </appender>
    
      <!-- Change this to debug to let more messages through. -->
      <root level="info">
        <appender-ref ref="console" />
      </root>
      <logger name="ch.qos.logback" level="warn"/>
      <logger name="com" level="info"/>
      <logger name="org" level="info"/>
      <logger name="com.amazonaws" level="info"/>
      <logger name="org.apache.http" level="info" />
      <logger name="com.conveyal" level="info"/>
      <logger name="notprivacysafe.graphql" level="warn" />
    
      <logger name="org.opentripplanner.graph_builder.module.DirectTransferGenerator" level="info" />
      <logger name="org.opentripplanner" level="info" />
      <logger name="org.opentripplanner.analyst" level="info" />
      <logger name="org.opentripplanner.routing" level="info" />
      <logger name="org.opentripplanner.routing.impl.RetryingPathServiceImpl" level="info" />
      <logger name="org.opentripplanner.routing.algorithm.GenericAStar" level="info" />
      <!-- Avoid printing debug messages about free-flowing vertices -->
      <logger name="org.opentripplanner.routing.vertextype.IntersectionVertex" level="info" />
      <!-- Avoid printing debug messages when walk limits are exceeded -->
      <logger name="org.opentripplanner.routing.edgetype.PlainStreetEdge" level="info" />
      <!-- Avoid printing info messages about calendars when building graph -->
      <logger name="org.onebusaway.gtfs.impl.calendar.CalendarServiceDataFactoryImpl" level="warn" />
      <!-- Avoid printing ugly warning message when unable to create websocket connection -->
      <logger name="com.ning.http.client.providers.netty.NettyAsyncHttpProvider" level="error" />
      <logger name="com.sun.jersey" level="warn" />
      <!-- Suppress an inconsequential IOException that is logged at debug level. -->
      <logger name="org.glassfish.grizzly" level="info" />
    
       <!--TODO temporary logging of SIRI java model to investigate the use of timestamps in input SIRI data-->
      <logger name="org.entur.siri.adapter.ZonedDateTimeAdapter" level="trace" />
    
    </configuration>
---
# Source: otp2/templates/cronjob-graph-builder.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  labels:    
    app: graph-builder-otp2
    release: graph-builder-otp2
    team: ror
    slack: talk-ror
    type: api
    namespace: default
  name: graph-builder-otp2
  namespace: default
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      # delete completed or failed jobs after 3 days (to give some time for error analysis)
      # jobs should normally be deleted automatically by marduk after graph building completion
      ttlSecondsAfterFinished: 259200
      template:
        metadata:
          annotations:
            prometheus.io/path: /metrics
            prometheus.io/port: "9779"
            prometheus.io/scrape: "true"
          labels:            
            app: graph-builder-otp2
            release: graph-builder-otp2
            team: ror
            slack: talk-ror
            type: api
            namespace: default
        spec:
          serviceAccountName: application
          containers:
          - command:
              - "java"
            args:
              - "-server"
              - "-Xms512m"
              - "-Xmx20g"
              - "-XX:MaxGCPauseMillis=5000"
              - "-XX:+UseTransparentHugePages"
              - "--add-opens=java.base/java.lang=ALL-UNNAMED"
              - "--add-opens=java.base/java.nio=ALL-UNNAMED"
              - "--add-opens=java.base/sun.nio.ch=ALL-UNNAMED"
              - "-javaagent:/opt/agent-bond/agent-bond.jar=jolokia{{host=0.0.0.0}},jmx_exporter{{9779:/opt/agent-bond/jmx_exporter_config.yml}}"
              - "-Dfile.encoding=UTF-8"
              - "-Dlogback.configurationFile=/etc/otp2/logback.xml"
              - "-Dentur.otp.service.name=otp2-gb"
              - "-jar"
              - "otp-shaded.jar"
              - "$(OTP_GRAPH_MODE)"
              - "/etc/application-config"
              - "--save"
            env:
            - name: TZ
              value: Europe/Oslo
            image: <+artifacts.primary.image>
            imagePullPolicy: Always
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /metrics
                port: 9779
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 30
            name: graph-builder-otp2
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /metrics
                port: 9779
                scheme: HTTP
              initialDelaySeconds: 30
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 20
            resources:
              limits:
                cpu: 5000m
                memory: 26000Mi
              requests:
                cpu: 5000m
                memory: 24000Mi
            securityContext:
              allowPrivilegeEscalation: false
              runAsNonRoot: true
              capabilities:
                drop: [ "ALL" ]
              seccompProfile:
                type: RuntimeDefault
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /etc/application-config
              name: application-config
              readOnly: true
            - mountPath: /etc/otp2/logback.xml
              name: logback-config-volume
              subPath: logback.xml  
          dnsPolicy: ClusterFirst
          restartPolicy: Never
          schedulerName: default-scheduler
          securityContext:
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationGracePeriodSeconds: 30
          volumes:
          - configMap:
              defaultMode: 420
              name: graph-builder-otp2
            name: application-config
          - configMap:
              defaultMode: 420
              name: otp2-logback-config-graph-builder
            name: logback-config-volume  
      backoffLimit: 3
  # the cron job should never run as it is used only as a template for creating new jobs.
  schedule: 0 0 1 1 0
  successfulJobsHistoryLimit: 1
  # the cron job should never run as it is used only as a template for creating new jobs.
  suspend: true
