<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.opentripplanner</groupId>
        <artifactId>otp-root</artifactId>
        <version>2.7.0-SNAPSHOT</version>
    </parent>
    <artifactId>shaded-jar</artifactId>
    <packaging>pom</packaging>
    <name>OpenTripPlanner - Shaded Jar</name>

    <properties>
        <maven.source>skip</maven.source>
        <skipShadeJar>false</skipShadeJar>
    </properties>

    <dependencies>
        <!-- project dependencies -->
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>application</artifactId>
            <version>${project.version}</version>
        </dependency>
    </dependencies>

    <build>
        <!-- finalName>otp-${project.version}-shaded</finalName -->
        <plugins>
            <!--
             There used to be a dependency-plugin:copy-dependencies plugin entry here, but the
             shade-plugin will explode the dependencies even if they aren't manually copied in.
            -->
            <plugin>
                <!-- We want to create a standalone jar that can be run on the command
                  line. Java does not really allow this - you cannot place jars inside of jars.
                  You must either provide all the dependency jars to the user (usually lib/
                  under the directory containing the runnable jar) or explode all the jars
                  and repackage them into a single jar. The problem is that while class files
                  are nicely organized into the package namespace and should not collide, the
                  META-INF directories of the jars will collide. Maven's standard assembly
                  plugin does not account for this and will just clobber metadata. This then
                  causes runtime errors, particularly with Spring. Instead, we use the shade
                  plugin which has transformers that will for example append files of the same
                  name rather than overwrite them in the combined JAR. NB: Don't use a version
                  of the shade plugin older than 1.3.2, as it fixed MSHADE-76 (files not merged
                  properly if some input files are missing a terminating newline) -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <configuration>
                    <!--
                    We need to set the final name for two reasons:
                      - We want the artifact to have another name than the maven module.
                        It should be "otp" not "shaded-jar"
                      - For some odd reason the maven-shade-plugin uses the ${project.packaging}
                        as the fila extension. So, without it, the file name is
                        "otp-SNAPSHOT-shaded.pom". Changing the packaging of the project is not
                        what we want either.
                    -->
                    <outputFile>${project.build.directory}/otp-${project.version}-shaded.jar</outputFile>
                    <filters>
                        <filter>
                            <!-- exclude signatures from merged JAR to avoid invalid signature messages -->
                            <artifact>*:*</artifact>
                            <excludes>
                                <exclude>META-INF/*.SF</exclude>
                                <exclude>META-INF/*.DSA</exclude>
                                <exclude>META-INF/*.RSA</exclude>
                            </excludes>
                        </filter>
                    </filters>
                    <skip>${skipShadeJar}</skip>
                    <!-- The shaded JAR will not be the main artifact for the project, it will be attached
                      for deployment in the way source and docs are. -->
                    <shadedArtifactAttached>true</shadedArtifactAttached>
                    <!-- shadedClassifierName>shaded</shadedClassifierName -->
                    <createDependencyReducedPom>false</createDependencyReducedPom>
                    <!-- MinimizeJar removes unused classes, (classes not imported explicitly by name).
                      We have eliminated most Jersey auto-scanning, but there is still some need for include
                      filters to force-include classes that are dynamically loaded by name/auto-scanned. -->
                    <!-- This roughly halves the size of the OTP JAR, bringing it down to around 20 MB.
                      <minimizeJar>true</minimizeJar>
                      <filters> <filter> <artifact>com.sun.jersey:*</artifact> <includes> <include>**</include>
                      </includes> </filter> <filter> <artifact>org.opentripplanner:*</artifact>
                      <includes> <include>**</include> </includes> </filter> </filters> -->
                    <transformers>
                        <transformer
                                implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                        <transformer
                                implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                            <manifestEntries>
                                <Main-Class>org.opentripplanner.standalone.OTPMain</Main-Class>
                                <!-- The ImageIO lines allow some image reader plugins to work
                                     https://stackoverflow.com/questions/7051603/jai-vendorname-null#18495658 -->
                                <Specification-Title>Java Advanced Imaging Image I/O
                                    Tools
                                </Specification-Title>
                                <Specification-Version>1.1</Specification-Version>
                                <Specification-Vendor>Sun Microsystems, Inc.</Specification-Vendor>
                                <Implementation-Title>com.sun.media.imageio</Implementation-Title>
                                <Implementation-Version>1.1</Implementation-Version>
                                <Implementation-Vendor>Sun Microsystems, Inc.
                                </Implementation-Vendor>
                                <Extension-Name>com.sun.media.imageio</Extension-Name>
                            </manifestEntries>
                        </transformer>
                    </transformers>
                </configuration>
                <executions>
                    <execution>
                        <id>build-shaded-jar</id>
                        <goals><goal>shade</goal></goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
